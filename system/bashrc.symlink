# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
  *i*) ;;
  *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# set shell window title
PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'

# enable the powerline shell and only in a fully featured console
case "${TERM}" in
  xterm*|screen*)
    if [[ -x "$(which powerline-daemon)" ]]; then
      powerline-daemon -q
      export POWERLINE_BASH_CONTINUATION=1
      export POWERLINE_BASH_SELECT=1

      if [[ -f "/usr/local/lib/python3.5/dist-packages/powerline/bindings/bash/powerline.sh" ]]; then
        source "/usr/local/lib/python3.5/dist-packages/powerline/bindings/bash/powerline.sh"
      elif [[ -f "/Library/Python/2.7/site-packages/powerline/bindings/bash/powerline.sh" ]]; then
        source "/Library/Python/2.7/site-packages/powerline/bindings/bash/powerline.sh"
      elif [[ -f "/usr/local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh" ]]; then
        source "/usr/local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh"
      fi
    fi
    ;;
esac

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

if [ -n "$DISPLAY" -a "$TERM" == "xterm" ]; then
  export TERM=xterm-256color
fi

# show git repo status in prompt
GIT_PS1_SHOWDIRTYSTATE=true

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# add the ssl cert file env var if it exists
if [ -f /usr/local/opt/curl-ca-bundle/share/ca-bundle.crt ]; then
  export SSL_CERT_FILE=/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt
fi

### Added by the Heroku Toolbelt
PATH="/usr/local/heroku/bin:$PATH"


PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
PATH=/usr/local/bin:/usr/local/sbin:$PATH # Add /usr/local/(s)bin before /usr/(s)bin

# include extra scripts from .bashrc.d
if [ -d "${HOME}/.bashrc.d" ]; then
  for file in ${HOME}/.bashrc.d/*; do
    if [ -x "${file}" ]; then
      . "${file}"
    fi
  done
fi

# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# Set homebrew defaults
if [ -x /usr/local/bin/brew ]; then
  export HOMEBREW_CASK_OPTS='--appdir=/Applications'
fi

# Set the go path
if [ -x $(which go) ]; then
  export GOPATH=$HOME/Development/go
fi

#### Run all the functions ####

####
