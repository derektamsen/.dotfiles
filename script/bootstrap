#!/usr/bin/env bash

# This will symlink the .dotfiles and setup your system
# See: README.md

DOTFILES_ROOT="`pwd`"

# global overwrite, backup, or skip
overwrite_all=false
backup_all=false
skip_all=false

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

setup_bashprofiled () {
  if ! [ -d "${HOME}/.bashrc.d" ]
  then
    info 'setup bashrc.d'

    mkdir "${HOME}/.bashrc.d"

    success 'bashrc.d'
  fi
}

setup_sublime2 () {
    info 'setup sublime text 2'
    
    case $OSTYPE in
        darwin*)
            dest="${HOME}/Library/Application Support/Sublime Text 2/Packages/User"
            
            source="${DOTFILES_ROOT}/sublime2/User"
            overwrite_backup_skip_link "${source}" "${dest}"
            
            for source in `find "${DOTFILES_ROOT}/sublime2" -maxdepth 2 -name \*.tmTheme -o -maxdepth 2 -name \*.tmbundle`
            do
                dest="${HOME}/Library/Application Support/Sublime Text 2/Packages/`basename \"${source%.*}\"`"
                overwrite_backup_skip_link "${source}" "${dest}"
            done
        ;;
        linux*)
            dest="${HOME}/.config/sublime-text-2/Packages/User"
            
            source="${DOTFILES_ROOT}/sublime2/User"
            overwrite_backup_skip_link "${source}" "${dest}"
            
            for source in `find "${DOTFILES_ROOT}/sublime2" -maxdepth 2 -name \*.tmTheme -o -maxdepth 2 -name \*.tmbundle`
            do
                dest="${HOME}/.config/sublime-text-2/Packages/`basename \"${source%.*}\"`"
                overwrite_backup_skip_link "${source}" "${dest}"
            done
        ;;
    esac
}

setup_sublime3 () {
    info 'setup sublime text 3'
    
    case $OSTYPE in
        darwin*)
            dest="${HOME}/Library/Application Support/Sublime Text 3/Packages/User"
            
            source="${DOTFILES_ROOT}/sublime3/User"
            overwrite_backup_skip_link "${source}" "${dest}"
            
            for source in `find "${DOTFILES_ROOT}/sublime3" -maxdepth 2 -name \*.tmTheme -o -maxdepth 2 -name \*.tmbundle`
            do
                dest="${HOME}/Library/Application Support/Sublime Text 3/Packages/`basename \"${source%.*}\"`"
                overwrite_backup_skip_link "${source}" "${dest}"
            done

            for source in `find "${DOTFILES_ROOT}/sublime3" -maxdepth 2 -name \*.sublime-package`
            do
                dest="${HOME}/Library/Application Support/Sublime Text 3/Installed Packages/`basename \"${source}\"`"
                overwrite_backup_skip_link "${source}" "${dest}"
            done

	    sudo ln -sf "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" "/usr/local/bin/subl"
        ;;
        linux*)
            dest="${HOME}/.config/sublime-text-3/Packages/User"
            
            source="${DOTFILES_ROOT}/sublime3/User"
            overwrite_backup_skip_link "${source}" "${dest}"
            
            for source in `find "${DOTFILES_ROOT}/sublime3" -maxdepth 2 -name \*.tmTheme -o -maxdepth 2 -name \*.tmbundle`
            do
                dest="${HOME}/.config/sublime-text-3/Packages/`basename \"${source%.*}\"`"
                overwrite_backup_skip_link "${source}" "${dest}"
            done
        ;;
    esac
}

setup_textmate2 () {
    info 'setup textmate2'

    case $OSTYPE in
        darwin*)
	    for source in `find "${DOTFILES_ROOT}/textmate2" -maxdepth 2 -name \*.tmbundle`
            do
                dest="${HOME}/Library/Application Support/TextMate/Managed/Bundles/`basename \"${source}\"`"
                overwrite_backup_skip_link "${source}" "${dest}"
            done
            ;;
    esac

}

setup_iterm2 () {
  if ! [ -f iterm2/com.googlecode.iterm2.mac_pref ]
  then
    info 'setup iterm2'

    cp iterm2/com.googlecode.iterm2.mac_pref.example iterm2/com.googlecode.iterm2.mac_pref

    success 'iterm2'
  fi
}

link_files () {
  ln -s "${1}" "${2}"
  success "linked \"${1}\" to \"${2}\""
}

overwrite_backup_skip_link () {
  source="${1}"
  dest="${2}"
  
  if [[ -f "${dest}" ]] || [[ -d "${dest}" ]]
  then

    overwrite=false
    backup=false
    skip=false

    if [ "${overwrite_all}" == "false" ] && [ "${backup_all}" == "false" ] && [ "${skip_all}" == "false" ]
    then
      user "File already exists: `basename \"${source}\"`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
      read -n 1 action

      case "${action}" in
        o )
          overwrite=true;;
        O )
          overwrite_all=true;;
        b )
          backup=true;;
        B )
          backup_all=true;;
        s )
          skip=true;;
        S )
          skip_all=true;;
        * )
          ;;
      esac
    fi

    if [[ "${overwrite}" == "true" ]] || [[ "${overwrite_all}" == "true" ]]
    then
      rm -rf "${dest}"
      success "removed \"${dest}\""
    fi

    if [[ "${backup}" == "true" ]] || [[ "${backup_all}" == "true" ]]
    then
      mv "${dest}" "${dest}.backup"
      success "moved \"${dest}\" to \"${dest}.backup\""
    fi

    if [[ "${skip}" == "false" ]] && [[ "${skip_all}" == "false" ]]
    then
      link_files "${source}" "${dest}"
    else
      success "skipped \"${source}\""
    fi

  else
    link_files "${source}" "${dest}"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  for source in `find "${DOTFILES_ROOT}" -maxdepth 2 -name \*.symlink`
  do
    dest="${HOME}/.`basename \"${source%.*}\"`"

    overwrite_backup_skip_link "${source}" "${dest}"

  done
}

install_desktopfiles () {
  if [[ -f /etc/issue ]]
  then
    if grep -Fq "Ubuntu" /etc/issue
    then
      info 'installing desktopfiles'

      for source in `find "${DOTFILES_ROOT}" -maxdepth 2 -name \*.desktop`
      do
        dest="${HOME}/.local/share/applications/`basename \"${source}\"`"

        overwrite_backup_skip_link "${source}" "${dest}"

      done
    fi
  fi
}

install_gnupg_conf () {
  info 'installing gnupg files'

  for source in `find "${DOTFILES_ROOT}" -maxdepth 2 -name \*.gnupg_conf`
  do
    dest="${HOME}/.gnupg/`basename \"${source%.*}.conf\"`"

    overwrite_backup_skip_link "${source}" "${dest}"

  done
}

install_svn_conf () {
  info 'installing svn files'

  if ! [ -d "${HOME}/.subversion" ]
  then
    info 'creating .subversion dir'

    mkdir "${HOME}/.subversion"

    success 'created .subversion dir'
  fi

  for source in `find "${DOTFILES_ROOT}" -maxdepth 2 -name \*.svn_conf`
  do
    dest="${HOME}/.subversion/`basename \"${source%.*}\"`"

    overwrite_backup_skip_link "${source}" "${dest}"

  done
}

install_mac_prefs () {
  info 'installing mac prefs'

  if [[ $OSTYPE =~ darwin* ]]
  then
    for source in `find "${DOTFILES_ROOT}" -maxdepth 2 -name \*.mac_pref`
    do
      dest="${HOME}/Library/Preferences/`basename \"${source%.*}.plist\"`"

      overwrite_backup_skip_link "${source}" "${dest}"

    done
  fi
}

setup_sublime3
setup_textmate2
setup_gitconfig
setup_bashprofiled
setup_iterm2
install_dotfiles
install_desktopfiles
install_gnupg_conf
install_svn_conf
install_mac_prefs

echo ''
echo '  All installed!'
